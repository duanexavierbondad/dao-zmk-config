/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */
// Czech Linux keyboard

#include "keys_cs.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Layer numbers

#define USDEF 0
#define USNUM 1
#define USNAV 2
#define USFUN 3
#define USADJ 4
#define CSDEF 5
#define CSDIA 6
#define CSDII 7
#define CSNUM 8
#define CSNAV 9
#define CSFUN 10
#define CSADJ 11

// Other number definitions

#define TAPPING_TERM 150
#define SHIFT_TAP_MS 170
#define QUICK_TAP_MS 110
#define PRIOR_IDLE_MS 150
#define COMBO_TIME_MS 25

// Behavior customizations
// settings and homerow mods inspired by https://github.com/urob/zmk-config/

&sk {
    release-after-ms = <900>;
    quick-release;
};

&sl { ignore-modifiers; };

&lt {
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

&mt { quick_tap_ms = <QUICK_TAP_MS>; };

// ZMK feature macros
// https://github.com/filterpaper/zmk-config
//additional  arguments for hold-trigger-key-positions and hold-trigger-on-release
// customizable hold-tap for keypress

#define HTK(name, tap_flavor, tap_term, ...)  \
name: name##_hold_tap {                       \
    label           = #name;                  \
    flavor          = #tap_flavor;            \
    compatible      = "zmk,behavior-hold-tap";\
    tapping-term-ms = <tap_term>;             \
    quick-tap-ms    = <QUICK_TAP_MS>;         \
    require-prior-idle-ms = <PRIOR_IDLE_MS>;  \
    #binding-cells  = <2>;                    \
    bindings        = <&kp>, <&kp>;           \
    __VA_ARGS__                               \
};

// customizeble hold-tap for any behavior

#define HTMOSL(name, tap_flavor, tap_term, ...) \
name: name##_hold_tap {                       \
    label           = #name;                  \
    flavor          = #tap_flavor;            \
    compatible      = "zmk,behavior-hold-tap";\
    tapping-term-ms = <tap_term>;             \
    quick-tap-ms    = <QUICK_TAP_MS>;         \
    require-prior-idle-ms = <PRIOR_IDLE_MS>;  \
    #binding-cells = <2>;                     \
    bindings        = <&mo>, <&sl>;           \
    __VA_ARGS__                               \
};

// one-line combos

#define COMBO(name, pos, lrs, kp)    \
combo_##name {                       \
    timeout-ms    = <25>; \
    bindings      = <kp>;            \
    key-positions = <pos>;           \
    layers        = <lrs>;           \
};

// one-line macros

#define MACRO(name, ...)                  \
name: name##_macro {                      \
    label          = #name;               \
    compatible     = "zmk,behavior-macro";\
    tap-ms         = <1>;                 \
    wait-ms        = <1>;                 \
    #binding-cells = <0>;                 \
    bindings       = __VA_ARGS__          \
};

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &extra_keys_transform;
    };
};

/ {
    macros {
        // Czech symbols

        MACRO(cs_t_caron, <&macro_tap &kp CS_CARON &kp CS_T>;)
             MACRO(cs_n_caron, <&macro_tap &kp CS_CARON &kp CS_N>;)
             MACRO(cs_d_caron, <&macro_tap &kp CS_CARON &kp CS_D>;)
             MACRO(cs_o_acute, <&macro_tap &kp CS_ACUTE &kp CS_O>;)

        // Emacs convenience macros

        MACRO(emacs_c_x, <&macro_press &kp LCTRL>, <&macro_tap &kp X>, <&macro_release &kp LCTRL>;)
             MACRO(emacs_c_y, <&macro_press &kp LCTRL>, <&macro_tap &kp Y>, <&macro_release &kp LCTRL>;)
             MACRO(emacs_c_z, <&macro_press &kp LCTRL>, <&macro_tap &kp Y>, <&macro_release &kp LCTRL>;)
             MACRO(emacs_c_x_e, <&macro_press &kp LCTRL> , <&macro_tap &kp X> , <&macro_release &kp LCTRL> , <&macro_tap &kp E>;)
             MACRO(emacs_c_w, <&macro_press &kp LCTRL> , <&macro_tap &kp W> , <&macro_release &kp LCTRL>;)
             MACRO(emacs_c_x_u, <&macro_press &kp LCTRL> , <&macro_tap &kp X> , <&macro_release &kp LCTRL> , <&macro_tap &kp U>;)
             MACRO(emacs_c_x_r, <&macro_press &kp LCTRL> , <&macro_tap &kp X> , <&macro_release &kp LCTRL> , <&macro_tap &kp R>;)
             MACRO(emacs_m_x, <&macro_press &kp LALT> , <&macro_tap &kp X> , <&macro_release &kp LALT>;)
             MACRO(emacs_m_w, <&macro_press &kp LALT> , <&macro_tap &kp W> , <&macro_release &kp LALT>;)
             MACRO(emacs_m_y, <&macro_press &kp LALT> , <&macro_tap &kp Y> , <&macro_release &kp LALT>;)
             MACRO(emacs_m_z, <&macro_press &kp LALT> , <&macro_tap &kp Y> , <&macro_release &kp LALT>;)

        // General convenience macros

        MACRO(input_lng, <&macro_press &kp LCTRL> , <&macro_press &kp LALT> , <&macro_tap &kp K> , <&macro_release &kp LCTRL> , <&macro_release &kp LALT>;)
    };

    behaviors {
        HTK(lhrm, balanced, TAPPING_TERM)
                HTK(rhrm, balanced, TAPPING_TERM)
                HTMOSL(ldia_mosl, hold-preferred, TAPPING_TERM)
                HTMOSL(rdia_mosl, hold-preferred, TAPPING_TERM)

        csquote: csquote {
            label = "csquote";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp CS_SQT>, <&kp CS_DQT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        csbslh: csbslh {
            label = "csbslh";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp CS_BSLH>, <&kp CS_PIPE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        csdot: csdot {
            label = "csdot";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp CS_DOT>, <&kp CS_LT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cscomma: cscomma {
            label = "cscomma";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp CS_COMMA>, <&kp CS_GT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        csfslh: csfslh {
            label = "csfslh";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp CS_FSLH>, <&kp CS_QMARK>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cssemi: cssemi {
            label = "cssemi";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp CS_SEMI>, <&kp CS_COLON>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        COMBO(lag, 28 29, USDEF USNUM CSDEF CSNUM, &kp RALT)
            COMBO(rag, 33 34, USDEF USNUM CSDEF CSNUM, &kp RALT)
            COMBO(csdeflayer, 12 13, USDEF CSDEF, &tog CSDEF)
            COMBO(csdiilayer, 24 25, CSDEF, &tog CSDII)
            COMBO(usnavlayer, 22 23, USDEF, &tog USNAV)
            COMBO(usnumlayer, 10 11, USDEF, &tog USNUM)
            COMBO(usfunlayer, 34 35, USDEF, &tog USFUN)
            COMBO(csnavlayer, 22 23, CSDEF, &tog CSNAV)
            COMBO(csnumlayer, 10 11, CSDEF, &tog CSNUM)
            COMBO(csfunlayer, 34 35, CSDEF, &tog CSFUN)
            COMBO(copy, 15 16, USDEF CSDEF, &kp K_COPY)
            COMBO(paste, 13 14, USDEF CSDEF, &kp K_PASTE)
            COMBO(repeat, 14 15, USDEF CSDEF, &key_repeat)

            COMBO(us_star, 7 19, USDEF, &kp STAR)
            COMBO(us_fslh, 4 16, USDEF, &kp FSLH)
            COMBO(us_plus, 8 20, USDEF, &kp PLUS)
            COMBO(us_minus, 3 15, USDEF, &kp MINUS)
            COMBO(us_caret, 9 21, USDEF, &kp CARET)
            COMBO(us_under, 2 14, USDEF, &kp UNDER)
            COMBO(us_dollar, 10 22, USDEF, &kp DOLLAR)
            COMBO(us_amps, 1 13, USDEF, &kp AMPS)
            COMBO(us_equal, 18 19, USDEF, &kp EQUAL)
            COMBO(us_at, 16 28, USDEF, &kp AT)
            COMBO(us_percent, 15 27, USDEF, &kp PERCENT)
            COMBO(us_tilde, 14 26, USDEF, &kp TILDE)
            COMBO(us_grave, 13 25, USDEF, &kp GRAVE)
            COMBO(us_hash, 19 31, USDEF, &kp HASH)
            COMBO(us_lpar, 19 20, USDEF, &kp LPAR)
            COMBO(us_rpar, 21 22, USDEF, &kp RPAR)
            COMBO(us_lbkt, 7 8, USDEF, &kp LBKT)
            COMBO(us_rbkt, 9 10, USDEF, &kp RBKT)
            COMBO(us_lbrc, 31 32, USDEF, &kp LBRC)
            COMBO(us_rbrc, 33 34, USDEF, &kp RBRC)
            COMBO(us_excl, 1 2, USDEF, &kp EXCL)
            COMBO(us_qmark, 3 4, USDEF, &kp QMARK)

            COMBO(cs_star, 7 19, CSDEF, &kp CS_STAR)
            COMBO(cs_fslh, 4 16, CSDEF, &kp CS_FSLH)
            COMBO(cs_plus, 8 20, CSDEF, &kp CS_PLUS)
            COMBO(cs_minus, 3 15, CSDEF, &kp CS_MINUS)
            COMBO(cs_caret, 9 21, CSDEF, &kp CS_CARET)
            COMBO(cs_under, 2 14, CSDEF, &kp CS_UNDER)
            COMBO(cs_dollar, 10 22, CSDEF, &kp CS_DOLLAR)
            COMBO(cs_amps, 1 13, CSDEF, &kp CS_AMPS)
            COMBO(cs_equal, 18 19, CSDEF, &kp CS_EQUAL)
            COMBO(cs_at, 16 28, CSDEF, &kp CS_AT)
            COMBO(cs_percent, 15 27, CSDEF, &kp CS_PERCENT)
            COMBO(cs_tilde, 14 26, CSDEF, &kp CS_TILDE)
            COMBO(cs_grave, 13 25, CSDEF, &kp CS_GRAVE)
            COMBO(cs_hash, 19 31, CSDEF, &kp CS_HASH)
            COMBO(cs_lpar, 19 20, CSDEF, &kp CS_LPAR)
            COMBO(cs_rpar, 21 22, CSDEF, &kp CS_RPAR)
            COMBO(cs_lbkt, 7 8, CSDEF, &kp CS_LBKT)
            COMBO(cs_rbkt, 9 10, CSDEF, &kp CS_RBKT)
            COMBO(cs_lbrc, 31 32, CSDEF, &kp CS_LBRC)
            COMBO(cs_rbrc, 33 34, CSDEF, &kp CS_RBRC)
            COMBO(cs_excl, 1 2, CSDEF, &kp CS_EXCL)
            COMBO(cs_qmark, 3 4, CSDEF, &kp CS_QMARK)

        Caps_Word {
            bindings = <&caps_word>;
            key-positions = <5 6>;
        };
    };

    // ------------------------------------------------------------------------------------------------------------
    // |  0    |  1  |  2  |  3   |  4   |  5   |          x         |  6   |  7    |  8    |  9   |  10   |  11   |
    // |  12   |  13 |  14 |  15  |  16  |  17  |          x         |  18  |  19   |  20   |  21  |  22   |  23   |
    // |  24   |  25 |  26 |  27  |  28  |  29  |          x         |  30  |  31   |  32   |  33  |  34   |  35   |
    //                            |  36  |  37  |  38    | x |  39   |  40  |  41   |
    //

    keymap {
        compatible = "zmk,keymap";

        // Layer list
        // 0. default_layer
        // 1. us_num_layer
        // 2. us_nav_layer
        // 3. us_fun_layer
        // 4. us_adjust_layer
        // 5. cs_base_layer
        // 6. cs_dia_layer
        // 7. cs_dii_layer
        // 8. cs_num_layer
        // 9. cs_nav_layer
        // 10. cs_fun_layer
        // 11. cs_adjust_layer

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  DEL  |  Q  |  L  | ESC  |  P   | ,↑<  |                   | .↑>  |  F   |  U    |  D   |   K   | BKSPC |
            // |  '↑"  |  A  |  R  |  E   |  N   |  B   |                   |  G   |  S   |  I    |  T   |   O   |  ;↑:  |
            // |  \↑|  |  Z  |  W  | TAB  |  H   |  J   |                   |  V   |  C   |  Y    |  M   |   X   |  /↑?  |
            //                            |NUMTOG| SHFT |  SPACE |  | ENTER | SHFT | FUN  |

            bindings = <
&kp DEL   &kp Q          &kp L         &kp ESC        &kp P          &kp COMMA    &kp DOT      &kp F          &kp U          &kp D         &kp K         &kp BSPC
&kp SQT   &lhrm LGUI A   &lhrm LALT R  &lhrm LCTRL E  &lhrm LSHFT N  &kp B        &kp G        &rhrm LSHFT S  &rhrm LCTRL I  &rhrm LALT T  &rhrm LGUI O  &kp SEMI
&kp BSLH  &lhrm LCTRL Z  &kp W         &kp TAB        &kp H          &kp J        &kp V        &kp C          &kp Y          &kp M         &kp X         &kp FSLH
                                       &tog 1         &kp LSHFT      &lt 2 ENTER  &lt 1 SPACE  &kp RSHFT      &sl 3
            >;
        };

        us_num_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |   $   |  7  |  6  |  5   |  4   |  8   |                   |  ~   |  ^    |  _    |  #   |   |   |  `    |
            // |   .   |  3  |  2  |  1   |  0   |  9   |                   |  %   |  (    |  [    |  {   |   \   |  $    |
            // |   ,   |  -  |  /  |  +   |  *   |  =   |                   |  @   |  )    |  ]    |  }   |   !   |  &    |
            //                            |      |      |        |  |       |      |       |

            bindings = <
&kp DOLLAR  &kp N7         &kp N6         &kp N5          &kp N4          &kp N8     &kp TILDE    &kp CARET         &kp UNDER         &kp HASH         &kp PIPE         &kp GRAVE
&kp DOT     &lhrm LGUI N3  &lhrm LALT N2  &lhrm LCTRL N1  &lhrm LSHFT N0  &kp N9     &kp PERCENT  &rhrm LSHFT LPAR  &rhrm LCTRL LBKT  &rhrm LALT LBRC  &rhrm LGUI BSLH  &kp DOLLAR
&kp COMMA   &kp MINUS      &kp FSLH       &kp PLUS        &kp STAR        &kp EQUAL  &kp AT       &kp RPAR          &kp RBKT          &kp RBRC         &kp EXCL         &kp AMPS
                                          &to 0           &to 0           &kp ENTER  &kp SPACE    &to 0             &to 0
            >;
        };

        us_nav_layer {
            bindings = <
&kp C_STOP  &kp C_MUTE  &kp C_VOL_UP  &kp C_VOL_DN  &kp C_PLAY  &kp C_PAUSE  &kp INS    &kp HOME  &kp UP    &kp END    &kp PG_UP  &kp BSPC
&none       &kp LGUI    &kp LALT      &kp LCTRL     &kp LSHFT   &kp K_CMENU  &kp CAPS   &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_DN  &kp ENTER
&kp K_REDO  &kp K_UNDO  &kp K_CUT     &kp K_PASTE   &kp K_COPY  &kp PSCRN    &kp B      &kp H     &kp J     &kp K      &kp L      &kp F
                                      &to 0         &to 0       &kp ENTER    &kp SPACE  &to 0     &to 0
            >;
        };

        us_fun_layer {
            bindings = <
&kp LSHFT  &kp F9  &kp F10  &kp F11  &kp F12  &tog 4      &none       &emacs_c_y  &emacs_c_w  &emacs_m_w  &emacs_m_y  &none
&kp LCTRL  &kp F5  &kp F6   &kp F7   &kp F8   &input_lng  &emacs_m_x  &kp LSHFT   &kp LCTRL   &kp LALT    &kp LGUI    &none
&kp LALT   &kp F1  &kp F2   &kp F3   &kp F4   &none       &emacs_c_x  &kp B       &kp N       &kp P       &kp F       &none
                            &to 0    &to 0    &kp ENTER   &kp SPACE   &to 0       &to 0
            >;
        };

        us_adjust_layer {
            bindings = <
&bootloader  &none         &none         &none         &none         &tog 4        &none  &none  &none  &none  &none  &none
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none  &none  &none  &none  &none  &none
&sys_reset   &none         &none         &none         &none         &none         &none  &none  &none  &none  &none  &none
                                         &to 0         &to 0         &to 0         &to 0  &to 0  &to 0
            >;
        };

        cs_def_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  DEL  |  Q  |  L  | ESC  |  P   | ,↑<  |                   | .↑>  |  F   |  U    |  D   |   K   | BKSPC |
            // |  '↑"  |  A  |  R  |  E   |  N   |  B   |                   |  G   |  S   |  I    |  T   |   O   |  ;↑:  |
            // |  \↑|  |  Z  |  W  | TAB  |  H   |  J   |                   |  V   |  C   |  Y    |  M   |   X   |  /↑?  |
            //                            | NAV  |      |  SPACE |  | ENTER |      | FUN  |

            bindings = <
&kp DEL   &kp CS_Q         &kp CS_L         &kp ESC                 &kp CS_P          &cscomma     &csdot       &kp CS_F          &kp CS_U                &kp CS_D         &kp CS_K         &kp BSPC
&csquote  &lhrm LGUI CS_A  &lhrm LALT CS_R  &lhrm LCTRL CS_E        &lhrm LSHFT CS_N  &kp CS_B     &kp CS_G     &rhrm LSHFT CS_S  &rhrm LCTRL CS_I        &rhrm LALT CS_T  &rhrm LGUI CS_O  &cssemi
&csbslh   &kp CS_Z         &kp CS_W         &kp TAB                 &kp CS_H          &kp CS_J     &kp CS_V     &kp CS_C          &kp CS_Y                &kp CS_M         &kp CS_X         &csfslh
                                            &ldia_mosl CSFUN CSDIA  &kp LSHFT         &lt 9 ENTER  &lt 8 SPACE  &kp RSHFT         &rdia_mosl CSFUN CSDIA
            >;
        };

        cs_dia_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  DEL  |  ←  |  ↑  |  ↓   |  →   |      |                   |  ÷   |  ú   |  ů    |  ď   |   ß   | BKSPC |
            // |   º   |  á  |  ř  |  ě   |  ň   |  ´   |                   |  ˇ   |  š   |  í    |  ť   |   ó   |   §   |
            // |   ¦   |  ž  |     |  é   |  °   |  ı   |                   |  ×   |  č   |  ý    |  ¨   |   ẞ   |       |
            //                            |      |      |  SPACE |  | ENTER |      |      |

            bindings = <
&kp DEL            &kp CS_LARROW   &kp CS_UARROW   &kp CS_DARROW   &kp CS_RARROW     &kp CS_QMARK   &kp CS_DIV    &kp CS_U_ACUTE  &kp CS_U_RING   &cs_d_caron    &kp CS_SZ        &kp BSPC
&kp CS_DEG         &kp CS_A_ACUTE  &kp CS_R_CARON  &kp CS_E_CARON  &cs_n_caron       &kp CS_ACUTE   &kp CS_CARON  &kp CS_S_CARON  &kp CS_I_ACUTE  &cs_t_caron    &cs_o_acute      &kp CS_SECT
&kp CS_PSEUDOPIPE  &kp CS_Z_CARON  &kp CS_EXCL     &kp CS_E_ACUTE  &kp CS_DEAD_RING  &kp CS_NEGATE  &kp CS_MULT   &kp CS_C_CARON  &kp CS_Y_ACUTE  &kp CS_UMLAUT  &kp CS_SZ_SMALL  &none
                                                   &to 5           &to 5             &to 5          &to 5         &to 5           &to 5
            >;
        };

        cs_dii_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  DEL  |  °  |  ¥  |  ø   |  Ø   |      |                   |  đ   |  Ð   |  ¯    |  ł   |   Ł   | BKSPC |
            // |   ˝   |  Ħ  |  ˛  |  €   |  Æ   |  ¶   |                   |  ®   |  ‚   |  ‘    |  ’   |   þ   |   Þ   |
            // |   `   |  ^  |  ˘  |  ¸   |  ©   |  ˙   |                   |  ŧ   |  Ŧ   |  Ŋ    |  Ω   |   ª   |   ´   |
            //                            |      |      |  SPACE |  | ENTER |      |      |

            bindings = <
&kp DEL              &kp CS_RING      &kp CS_YEN     &kp CS_OCROSS   &kp CS_OCROSS_CAP  &none             &kp CS_D_STROKE  &kp CS_D_STROKE_CAP  &kp CS_BAR_ABOVE    &kp CS_L_STROKE     &kp CS_L_STROKE_CAP  &kp BSPC
&kp CS_DOUBLE_ACUTE  &kp CS_H_STROKE  &kp CS_OGONEK  &kp CS_EURO     &kp CS_AE          &kp CS_PARAG      &kp CS_RMARK     &kp CS_BOTTOM_SQT    &kp CS_UPPER_SQT_L  &kp CS_UPPER_SQT_R  &kp CS_PLINE         &kp CS_PLINE_CAP
&kp CS_DEAD_GRAVE_L  &kp CS_HAT       &kp CS_BREVE   &kp CS_CEDILLA  &kp CS_CMARK       &kp CS_DOT_ABOVE  &kp CS_T_STROKE  &kp CS_T_STROKE_CAP  &kp CS_ETA          &kp CS_OMEGA        &kp CS_A_INDEX       &kp CS_DEAD_GRAVE_R
                                                     &to 5           &to 5              &to 5             &to 5            &to 5                &to 5
            >;
        };

        cs_num_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |   $   |  7  |  6  |  5   |  4   |  8   |                   |  ~   |  ^    |  _    |  #   |   |   |  `    |
            // |   .   |  3  |  2  |  1   |  0   |  9   |                   |  %   |  (    |  [    |  {   |   \   |  $    |
            // |   ,   |  -  |  /  |  +   |  *   |  =   |                   |  @   |  )    |  ]    |  }   |   !   |  &    |
            //                            |      |      |        |  |       |      |       |

            bindings = <
&kp CS_DOLLAR  &kp CS_N7         &kp CS_N6         &kp CS_N5          &kp CS_N4          &kp CS_N8     &kp CS_TILDE    &kp CS_CARET         &kp CS_UNDER         &kp CS_HASH         &kp CS_PIPE         &kp CS_GRAVE
&kp CS_DOT     &lhrm LGUI CS_N3  &lhrm LALT CS_N2  &lhrm LCTRL CS_N1  &lhrm LSHFT CS_N0  &kp CS_N9     &kp CS_PERCENT  &rhrm LSHFT CS_LPAR  &rhrm LCTRL CS_LBKT  &rhrm LALT CS_LBRC  &rhrm LGUI CS_BSLH  &kp CS_DOLLAR
&kp CS_COMMA   &kp CS_MINUS      &kp CS_FSLH       &kp CS_PLUS        &kp CS_STAR        &kp CS_EQUAL  &kp CS_AT       &kp CS_RPAR          &kp CS_RBKT          &kp CS_RBRC         &kp CS_EXCL         &kp CS_AMPS
                                                   &to 5              &to 5              &kp ENTER     &kp SPACE       &to 5                &to 5
            >;
        };

        cs_nav_layer {
            bindings = <
&kp C_STOP  &kp C_MUTE  &kp C_VOL_UP  &kp C_VOL_DN  &kp C_PLAY  &kp C_PAUSE  &kp INS    &kp HOME  &kp UP    &kp END    &kp PG_UP  &kp BSPC
&none       &kp LGUI    &kp LALT      &kp LCTRL     &kp LSHFT   &kp K_CMENU  &kp CAPS   &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_DN  &kp ENTER
&kp K_REDO  &kp K_UNDO  &kp K_CUT     &kp K_PASTE   &kp K_COPY  &kp PSCRN    &kp B      &kp H     &kp J     &kp K      &kp L      &kp F
                                      &to 5         &to 5       &kp ENTER    &kp SPACE  &to 5     &to 5
            >;
        };

        cs_fun_layer {
            bindings = <
&kp LSHFT  &kp F9  &kp F10  &kp F11  &kp F12  &tog 8      &none       &emacs_c_z  &emacs_c_w  &emacs_m_w  &emacs_m_z  &none
&kp LCTRL  &kp F5  &kp F6   &kp F7   &kp F8   &input_lng  &emacs_m_x  &kp LSHFT   &kp LCTRL   &kp LALT    &kp LGUI    &none
&kp LALT   &kp F1  &kp F2   &kp F3   &kp F4   &none       &emacs_c_x  &kp B       &kp N       &kp P       &kp F       &none
                            &to 5    &to 5    &kp ENTER   &kp SPACE   &to 5       &to 5
            >;
        };

        cs_adjust_layer {
            bindings = <
&bootloader  &none         &none         &none         &none         &tog 8        &none  &none  &none  &none  &none  &none
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none  &none  &none  &none  &none  &none
&sys_reset   &none         &none         &none         &none         &none         &none  &none  &none  &none  &none  &none
                                         &to 5         &to 5         &to 5         &to 5  &to 5  &to 5
            >;
        };

        layer_12 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_13 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
